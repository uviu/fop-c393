ghci> op :: Ordering -> Ordering -> Ordering; op x y = case x of; LT -> LT; EQ -> y; GT -> GT
ghci> import Test.LeanCheck
ghci> check $ \ (x::Ordering) (y::Ordering) -> op x y == op y x
*** Failed! Falsifiable (after 3 tests):
LT GT
ghci> check $ \ (x::Ordering) (y::Ordering) (z::Ordering) -> op x (op y z) == op (op x y) z
+++ OK, passed 27 tests (exhausted).
ghci> check $ \(x::Ordering) -> op x LT == x
*** Failed! Falsifiable (after 2 tests):
EQ
ghci> check $ \(x::Ordering) -> op x EQ == x
+++ OK, passed 3 tests (exhausted).
ghci> check $ \(x::Ordering) -> op EQ x == x
+++ OK, passed 3 tests (exhausted).
ghci> check $ \(x::Ordering) -> op x LT == EQ
*** Failed! Falsifiable (after 1 tests):
LT
ghci> check $ \(x::Ordering) -> op x GT == EQ
*** Failed! Falsifiable (after 1 tests):
LT
ghci> check $ \(x::Ordering) -> op x EQ == EQ
*** Failed! Falsifiable (after 1 tests):
LT
ghci> check $ \ (x::Ordering) -> (x <> x) == x
+++ OK, passed 3 tests (exhausted).
